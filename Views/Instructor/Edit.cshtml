@model CourseManagement.Models.ClassRoom

<h1>Chỉnh sửa lớp: @Model.Title</h1>

@if (!string.IsNullOrEmpty(Model.EnrollmentPasswordHash))
{
    <div class="alert alert-info">Lớp hiện có mật khẩu ghi danh đặt sẵn.</div>
}

<form method="post" class="row g-2">
    @Html.AntiForgeryToken()
    <div class="col-md-8">
        <label class="form-label">Mật khẩu ghi danh (để trống để xoá)</label>
        <input type="password" name="enrollmentPassword" class="form-control" />
    </div>
    <div class="col-md-4 align-self-end">
        <button type="submit" class="btn btn-primary">Lưu</button>
    </div>
</form>

<hr />
<h3>Nội dung lớp</h3>
<!-- Simple editor: choose Text or Assignment -->
<div class="mb-3">
    <label class="form-label">Thêm nội dung</label>
    <div>
        <a class="btn btn-outline-secondary me-2" href="#"
            onclick="document.getElementById('textArea').style.display='block'; document.getElementById('assignmentForm').style.display='none'; return false;">Text</a>
        <a class="btn btn-outline-secondary" href="#"
            onclick="document.getElementById('assignmentForm').style.display='block'; document.getElementById('textArea').style.display='none'; return false;">Bài
            tập</a>
    </div>
</div>

<!-- Text editor area (simple textarea for now) -->
<div id="textArea" style="display:none;">
    <label class="form-label">Nội dung (Text)</label>
    <textarea class="form-control" rows="6"></textarea>
    <div class="mt-2">
        <label class="form-label">Kích cỡ chữ</label>
        <select class="form-select w-auto d-inline-block">
            <option value="14">14</option>
            <option value="16">16</option>
            <option value="18">18</option>
        </select>
        <label class="form-label ms-3">Màu chữ</label>
        <input type="color" class="form-control w-auto d-inline-block" value="#000000" />
        <button class="btn btn-primary ms-3">Lưu nội dung</button>
    </div>
</div>

<!-- Create assignment quick form -->
<div id="assignmentForm" style="display:none;">
    <form asp-controller="Assignments" asp-action="CreateFromEditor" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="classId" value="@Model.Id" />
        <div class="mb-2">
            <label class="form-label">Tiêu đề bài tập</label>
            <input name="title" class="form-control" />
        </div>
        <div class="mb-2">
            <label class="form-label">Mô tả ngắn (tuỳ chọn)</label>
            <textarea name="description" class="form-control" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Tạo bài tập</button>
    </form>
</div>

<div class="mt-4" id="contentBlocksArea">
    @* Anti-forgery token for AJAX posts *@
    @Html.AntiForgeryToken()
    @{
        var db = Context.RequestServices.GetService(typeof(CourseManagement.Data.ApplicationDbContext)) as
        CourseManagement.Data.ApplicationDbContext;
    }
    @if (db != null)
    {
        // Render assignment blocks first so they appear in the content flow and persist after reload
        var assigns = db.Assignments.Where(a => a.ClassRoomId == Model.Id).OrderBy(a => a.CreatedAt).ToList();
        foreach (var a in assigns)
        {
            <partial name="_AssignmentBlock" model="a" />
        }

        var list = db.ContentBlocks.Where(cb => cb.ClassRoomId == Model.Id).OrderBy(cb => cb.Order).ToList();
        foreach (var b in list)
        {
            <partial name="_ContentBlock" model="b" />
        }
    }
    <div id="addBlockPicker" class="p-3 border rounded mt-3"
        onmouseover="this.querySelector('.picker').style.display='block'"
        onmouseout="this.querySelector('.picker').style.display='none'">
        <div class="picker" style="display:none;">
            <button class="btn btn-outline-secondary me-2"
                onclick="showNewTextBlock(@Model.Id); return false;">Text</button>
            <button class="btn btn-outline-secondary" onclick="showNewAssignment(@Model.Id); return false;">Bài
                tập</button>
        </div>
        <div id="newBlockArea"></div>
    </div>
</div>

<script>
    function showNewTextBlock(classId) {
        var area = document.getElementById('newBlockArea');
        area.innerHTML = '<textarea id="newText" class="form-control" rows="4"></textarea><div class="mt-2"><button class="btn btn-primary" onclick="createBlock(' + classId + ')">Lưu</button></div>';
    }
    function showNewAssignment(classId) {
        var area = document.getElementById('newBlockArea');
        area.innerHTML = '\n            <div class="p-3 border rounded mb-3">\n                <div class="mb-2">\n                    <label class="form-label">Tiêu đề bài tập</label>\n                    <input id="newAssignTitle" class="form-control" />\n                </div>\n                <div class="mb-2">\n                    <label class="form-label">Mô tả ngắn (tuỳ chọn)</label>\n                    <textarea id="newAssignDesc" class="form-control" rows="2"></textarea>\n                </div>\n                <div class="text-end">\n                    <button class="btn btn-sm btn-secondary" onclick="cancelNewAssign()">Huỷ</button>\n                    <button class="btn btn-sm btn-primary" onclick="createAssignment(' + classId + ')">Tạo</button>\n                </div>\n            </div>';
    }

    function cancelNewAssign() {
        document.getElementById('newBlockArea').innerHTML = '';
    }

    async function createAssignment(classId) {
        var title = document.getElementById('newAssignTitle')?.value;
        var desc = document.getElementById('newAssignDesc')?.value;
        if (!title || title.trim().length == 0) { alert('Vui lòng nhập tiêu đề'); return; }
        var form = new FormData();
        var token = document.querySelector('input[name=__RequestVerificationToken]')?.value;
        if (token) form.append('__RequestVerificationToken', token);
        form.append('classId', classId);
        form.append('title', title);
        form.append('description', desc || '');

        var res = await fetch('/Assignments/CreateFromEditor', { method: 'POST', body: form, headers: { 'X-Requested-With': 'XMLHttpRequest' } });
        if (res.ok) {
            var html = await res.text();
            // insert before the add picker (so new items appear above the picker)
            var picker = document.getElementById('addBlockPicker');
            picker.insertAdjacentHTML('beforebegin', html);
            document.getElementById('newBlockArea').innerHTML = '';
        } else {
            var txt = await res.text();
            alert('Tạo bài tập thất bại: ' + res.status + '\n' + txt);
        }
    }
    async function createBlock(classId) {
        var newTextEl = document.getElementById('newText');
        if (!newTextEl) return;
        var content = newTextEl.value;
        var form = new FormData();
        form.append('__RequestVerificationToken', document.querySelector('input[name=__RequestVerificationToken]').value);
        form.append('classId', classId);
        form.append('content', content);
        var res = await fetch('/ContentBlocks/Create', { method: 'POST', body: form });
        if (res.ok) {
            var html = await res.text();
            document.getElementById('contentBlocksArea').insertAdjacentHTML('beforeend', html);
            document.getElementById('newBlockArea').innerHTML = '';
        } else alert('Tạo thất bại');
    }
</script>

<script>
    // Delegated handlers for content-block interactions
    document.addEventListener('click', function (e) {
        var del = e.target.closest('button[data-action="delete"]');
        if (del) {
            var id = del.getAttribute('data-id');
            deleteBlock(id);
            return;
        }
        var saveBtn = e.target.closest('button[data-action="save"]');
        if (saveBtn) {
            // handled by save logic below via event delegation
            return;
        }
        var cancelBtn = e.target.closest('button[data-action="cancel"]');
        if (cancelBtn) {
            var block = cancelBtn.closest('.content-block');
            var ta = block.querySelector('textarea');
            if (ta) ta.remove();
            var display = block.querySelector('[data-editable]');
            var controls = block.querySelector('[data-controls]');
            if (display) display.style.display = 'block';
            if (controls) controls.style.display = 'none';
            return;
        }
    });

    document.addEventListener('dblclick', function (e) {
        var ed = e.target.closest('[data-editable]');
        if (ed) { enableEdit(ed); }
    });

    function enableEdit(el) {
        var block = el.closest('.content-block');
        if (!block) return;
        var id = block.getAttribute('data-block-id');
        var content = el.innerHTML;
        var ta = document.createElement('textarea');
        ta.className = 'form-control';
        ta.style.minHeight = '120px';
        ta.value = content.replace(/<br\s*\/?\s*>/g, '\n');
        el.style.display = 'none';
        var controls = block.querySelector('[data-controls]');
        if (controls) controls.style.display = 'block';
        if (controls) controls.innerHTML = '<button class="btn btn-sm btn-primary" data-action="save" data-id="' + id + '">Lưu</button> <button class="btn btn-sm btn-secondary" data-action="cancel">Huỷ</button>';
        block.insertBefore(ta, controls);
    }

    document.addEventListener('click', async function (e) {
        var save = e.target.closest('button[data-action="save"]');
        if (!save) return;
        var id = save.getAttribute('data-id');
        var block = save.closest('.content-block');
        var ta = block.querySelector('textarea');
        if (!ta) return;
        var content = ta.value;
        var form = new FormData();
        var tokenInput = document.querySelector('input[name=__RequestVerificationToken]');
        if (tokenInput) form.append('__RequestVerificationToken', tokenInput.value);
        form.append('id', id);
        form.append('content', content);
        var res = await fetch('/ContentBlocks/Update', { method: 'POST', body: form });
        if (res.ok) {
            var html = await res.text();
            block.outerHTML = html;
        } else {
            alert('Lưu thất bại');
        }
    });

    async function deleteBlock(id) {
        if (!confirm('Xác nhận xóa?')) return;
        var form = new FormData();
        var tokenInput = document.querySelector('input[name=__RequestVerificationToken]');
        if (tokenInput) form.append('__RequestVerificationToken', tokenInput.value);
        form.append('id', id);
        var res = await fetch('/ContentBlocks/Delete', { method: 'POST', body: form });
        if (res.ok) {
            document.querySelector('.content-block[data-block-id="' + id + '"]')?.remove();
        } else alert('Xóa thất bại');
    }
</script>